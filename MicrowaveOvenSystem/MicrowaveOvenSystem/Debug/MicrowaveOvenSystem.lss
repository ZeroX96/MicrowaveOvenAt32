
MicrowaveOvenSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  00800060  00800060  00000716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039fb  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e81  00000000  00000000  0000443f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001daa  00000000  00000000  000052c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  0000706c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000185e  00000000  00000000  00007974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035e7  00000000  00000000  000091d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000c7b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_4>
  14:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_10>
  2c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_13>
  38:	0c 94 25 03 	jmp	0x64a	; 0x64a <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3a       	cpi	r26, 0xA1	; 161
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4e 03 	call	0x69c	; 0x69c <main>
  8a:	0c 94 4f 03 	jmp	0x69e	; 0x69e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	9c 01       	movw	r18, r24
  98:	fb 01       	movw	r30, r22
  9a:	dc 01       	movw	r26, r24
  9c:	11 96       	adiw	r26, 0x01	; 1
  9e:	cd 91       	ld	r28, X+
  a0:	dc 91       	ld	r29, X
  a2:	12 97       	sbiw	r26, 0x02	; 2
  a4:	d3 83       	std	Z+3, r29	; 0x03
  a6:	c2 83       	std	Z+2, r28	; 0x02
  a8:	8c 81       	ldd	r24, Y+4	; 0x04
  aa:	9d 81       	ldd	r25, Y+5	; 0x05
  ac:	95 83       	std	Z+5, r25	; 0x05
  ae:	84 83       	std	Z+4, r24	; 0x04
  b0:	8c 81       	ldd	r24, Y+4	; 0x04
  b2:	9d 81       	ldd	r25, Y+5	; 0x05
  b4:	dc 01       	movw	r26, r24
  b6:	13 96       	adiw	r26, 0x03	; 3
  b8:	7c 93       	st	X, r23
  ba:	6e 93       	st	-X, r22
  bc:	12 97       	sbiw	r26, 0x02	; 2
  be:	7d 83       	std	Y+5, r23	; 0x05
  c0:	6c 83       	std	Y+4, r22	; 0x04
  c2:	31 87       	std	Z+9, r19	; 0x09
  c4:	20 87       	std	Z+8, r18	; 0x08
  c6:	f9 01       	movw	r30, r18
  c8:	80 81       	ld	r24, Z
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 83       	st	Z, r24
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  da:	a0 85       	ldd	r26, Z+8	; 0x08
  dc:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  de:	c2 81       	ldd	r28, Z+2	; 0x02
  e0:	d3 81       	ldd	r29, Z+3	; 0x03
  e2:	84 81       	ldd	r24, Z+4	; 0x04
  e4:	95 81       	ldd	r25, Z+5	; 0x05
  e6:	9d 83       	std	Y+5, r25	; 0x05
  e8:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  ea:	c4 81       	ldd	r28, Z+4	; 0x04
  ec:	d5 81       	ldd	r29, Z+5	; 0x05
  ee:	82 81       	ldd	r24, Z+2	; 0x02
  f0:	93 81       	ldd	r25, Z+3	; 0x03
  f2:	9b 83       	std	Y+3, r25	; 0x03
  f4:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  f6:	11 96       	adiw	r26, 0x01	; 1
  f8:	8d 91       	ld	r24, X+
  fa:	9c 91       	ld	r25, X
  fc:	12 97       	sbiw	r26, 0x02	; 2
  fe:	e8 17       	cp	r30, r24
 100:	f9 07       	cpc	r31, r25
 102:	31 f4       	brne	.+12     	; 0x110 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 104:	84 81       	ldd	r24, Z+4	; 0x04
 106:	95 81       	ldd	r25, Z+5	; 0x05
 108:	12 96       	adiw	r26, 0x02	; 2
 10a:	9c 93       	st	X, r25
 10c:	8e 93       	st	-X, r24
 10e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 110:	11 86       	std	Z+9, r1	; 0x09
 112:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 114:	8c 91       	ld	r24, X
 116:	81 50       	subi	r24, 0x01	; 1
 118:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	0f 92       	push	r0
 128:	1f 92       	push	r1
 12a:	11 24       	eor	r1, r1
 12c:	2f 92       	push	r2
 12e:	3f 92       	push	r3
 130:	4f 92       	push	r4
 132:	5f 92       	push	r5
 134:	6f 92       	push	r6
 136:	7f 92       	push	r7
 138:	8f 92       	push	r8
 13a:	9f 92       	push	r9
 13c:	af 92       	push	r10
 13e:	bf 92       	push	r11
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	2f 93       	push	r18
 14e:	3f 93       	push	r19
 150:	4f 93       	push	r20
 152:	5f 93       	push	r21
 154:	6f 93       	push	r22
 156:	7f 93       	push	r23
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
 168:	a0 91 91 00 	lds	r26, 0x0091	; 0x800091 <pxCurrentTCB>
 16c:	b0 91 92 00 	lds	r27, 0x0092	; 0x800092 <pxCurrentTCB+0x1>
 170:	0d b6       	in	r0, 0x3d	; 61
 172:	0d 92       	st	X+, r0
 174:	0e b6       	in	r0, 0x3e	; 62
 176:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 178:	0e 94 0e 01 	call	0x21c	; 0x21c <xTaskIncrementTick>
 17c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 17e:	0e 94 c9 01 	call	0x392	; 0x392 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 182:	a0 91 91 00 	lds	r26, 0x0091	; 0x800091 <pxCurrentTCB>
 186:	b0 91 92 00 	lds	r27, 0x0092	; 0x800092 <pxCurrentTCB+0x1>
 18a:	cd 91       	ld	r28, X+
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	dd 91       	ld	r29, X+
 190:	de bf       	out	0x3e, r29	; 62
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	bf 91       	pop	r27
 19c:	af 91       	pop	r26
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	7f 91       	pop	r23
 1a4:	6f 91       	pop	r22
 1a6:	5f 91       	pop	r21
 1a8:	4f 91       	pop	r20
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	bf 90       	pop	r11
 1bc:	af 90       	pop	r10
 1be:	9f 90       	pop	r9
 1c0:	8f 90       	pop	r8
 1c2:	7f 90       	pop	r7
 1c4:	6f 90       	pop	r6
 1c6:	5f 90       	pop	r5
 1c8:	4f 90       	pop	r4
 1ca:	3f 90       	pop	r3
 1cc:	2f 90       	pop	r2
 1ce:	1f 90       	pop	r1
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0

	asm volatile ( "ret" );
 1d6:	08 95       	ret

000001d8 <__vector_7>:
	//void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	//void SIG_OUTPUT_COMPARE1A( void )
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 1d8:	0e 94 90 00 	call	0x120	; 0x120 <vPortYieldFromTick>
		asm volatile ( "reti" );
 1dc:	18 95       	reti

000001de <prvResetNextTaskUnblockTime>:
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 1de:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <pxDelayedTaskList>
 1e2:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <pxDelayedTaskList+0x1>
 1e6:	80 81       	ld	r24, Z
 1e8:	81 11       	cpse	r24, r1
 1ea:	07 c0       	rjmp	.+14     	; 0x1fa <prvResetNextTaskUnblockTime+0x1c>
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	9f ef       	ldi	r25, 0xFF	; 255
 1f0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <xNextTaskUnblockTime+0x1>
 1f4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <xNextTaskUnblockTime>
 1f8:	08 95       	ret
 1fa:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <pxDelayedTaskList>
 1fe:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <pxDelayedTaskList+0x1>
 202:	05 80       	ldd	r0, Z+5	; 0x05
 204:	f6 81       	ldd	r31, Z+6	; 0x06
 206:	e0 2d       	mov	r30, r0
 208:	06 80       	ldd	r0, Z+6	; 0x06
 20a:	f7 81       	ldd	r31, Z+7	; 0x07
 20c:	e0 2d       	mov	r30, r0
 20e:	82 81       	ldd	r24, Z+2	; 0x02
 210:	93 81       	ldd	r25, Z+3	; 0x03
 212:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <xNextTaskUnblockTime+0x1>
 216:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <xNextTaskUnblockTime>
 21a:	08 95       	ret

0000021c <xTaskIncrementTick>:
 21c:	cf 92       	push	r12
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 230:	81 11       	cpse	r24, r1
 232:	99 c0       	rjmp	.+306    	; 0x366 <xTaskIncrementTick+0x14a>
 234:	e0 90 67 00 	lds	r14, 0x0067	; 0x800067 <xTickCount>
 238:	f0 90 68 00 	lds	r15, 0x0068	; 0x800068 <xTickCount+0x1>
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	e8 1a       	sub	r14, r24
 240:	f8 0a       	sbc	r15, r24
 242:	f0 92 68 00 	sts	0x0068, r15	; 0x800068 <xTickCount+0x1>
 246:	e0 92 67 00 	sts	0x0067, r14	; 0x800067 <xTickCount>
 24a:	e1 14       	cp	r14, r1
 24c:	f1 04       	cpc	r15, r1
 24e:	b9 f4       	brne	.+46     	; 0x27e <xTaskIncrementTick+0x62>
 250:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <pxDelayedTaskList>
 254:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <pxDelayedTaskList+0x1>
 258:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <pxOverflowDelayedTaskList>
 25c:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <pxOverflowDelayedTaskList+0x1>
 260:	30 93 6c 00 	sts	0x006C, r19	; 0x80006c <pxDelayedTaskList+0x1>
 264:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <pxDelayedTaskList>
 268:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <pxOverflowDelayedTaskList+0x1>
 26c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <pxOverflowDelayedTaskList>
 270:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <xNumOfOverflows>
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <xNumOfOverflows>
 27a:	0e 94 ef 00 	call	0x1de	; 0x1de <prvResetNextTaskUnblockTime>
 27e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <xNextTaskUnblockTime>
 282:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <xNextTaskUnblockTime+0x1>
 286:	e8 16       	cp	r14, r24
 288:	f9 06       	cpc	r15, r25
 28a:	10 f4       	brcc	.+4      	; 0x290 <xTaskIncrementTick+0x74>
 28c:	d1 2c       	mov	r13, r1
 28e:	53 c0       	rjmp	.+166    	; 0x336 <xTaskIncrementTick+0x11a>
 290:	d1 2c       	mov	r13, r1
 292:	cc 24       	eor	r12, r12
 294:	c3 94       	inc	r12
 296:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <pxDelayedTaskList>
 29a:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <pxDelayedTaskList+0x1>
 29e:	80 81       	ld	r24, Z
 2a0:	81 11       	cpse	r24, r1
 2a2:	07 c0       	rjmp	.+14     	; 0x2b2 <xTaskIncrementTick+0x96>
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	9f ef       	ldi	r25, 0xFF	; 255
 2a8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <xNextTaskUnblockTime+0x1>
 2ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <xNextTaskUnblockTime>
 2b0:	42 c0       	rjmp	.+132    	; 0x336 <xTaskIncrementTick+0x11a>
 2b2:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <pxDelayedTaskList>
 2b6:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <pxDelayedTaskList+0x1>
 2ba:	05 80       	ldd	r0, Z+5	; 0x05
 2bc:	f6 81       	ldd	r31, Z+6	; 0x06
 2be:	e0 2d       	mov	r30, r0
 2c0:	c6 81       	ldd	r28, Z+6	; 0x06
 2c2:	d7 81       	ldd	r29, Z+7	; 0x07
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	9b 81       	ldd	r25, Y+3	; 0x03
 2c8:	e8 16       	cp	r14, r24
 2ca:	f9 06       	cpc	r15, r25
 2cc:	28 f4       	brcc	.+10     	; 0x2d8 <xTaskIncrementTick+0xbc>
 2ce:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <xNextTaskUnblockTime+0x1>
 2d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <xNextTaskUnblockTime>
 2d6:	2f c0       	rjmp	.+94     	; 0x336 <xTaskIncrementTick+0x11a>
 2d8:	8e 01       	movw	r16, r28
 2da:	0e 5f       	subi	r16, 0xFE	; 254
 2dc:	1f 4f       	sbci	r17, 0xFF	; 255
 2de:	c8 01       	movw	r24, r16
 2e0:	0e 94 6a 00 	call	0xd4	; 0xd4 <uxListRemove>
 2e4:	8c 89       	ldd	r24, Y+20	; 0x14
 2e6:	9d 89       	ldd	r25, Y+21	; 0x15
 2e8:	89 2b       	or	r24, r25
 2ea:	21 f0       	breq	.+8      	; 0x2f4 <xTaskIncrementTick+0xd8>
 2ec:	ce 01       	movw	r24, r28
 2ee:	0c 96       	adiw	r24, 0x0c	; 12
 2f0:	0e 94 6a 00 	call	0xd4	; 0xd4 <uxListRemove>
 2f4:	8e 89       	ldd	r24, Y+22	; 0x16
 2f6:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <uxTopReadyPriority>
 2fa:	98 17       	cp	r25, r24
 2fc:	10 f4       	brcc	.+4      	; 0x302 <xTaskIncrementTick+0xe6>
 2fe:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <uxTopReadyPriority>
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	9c 01       	movw	r18, r24
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	22 0f       	add	r18, r18
 310:	33 1f       	adc	r19, r19
 312:	82 0f       	add	r24, r18
 314:	93 1f       	adc	r25, r19
 316:	b8 01       	movw	r22, r16
 318:	83 59       	subi	r24, 0x93	; 147
 31a:	9f 4f       	sbci	r25, 0xFF	; 255
 31c:	0e 94 49 00 	call	0x92	; 0x92 <vListInsertEnd>
 320:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <pxCurrentTCB>
 324:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <pxCurrentTCB+0x1>
 328:	9e 89       	ldd	r25, Y+22	; 0x16
 32a:	86 89       	ldd	r24, Z+22	; 0x16
 32c:	98 17       	cp	r25, r24
 32e:	08 f4       	brcc	.+2      	; 0x332 <xTaskIncrementTick+0x116>
 330:	b2 cf       	rjmp	.-156    	; 0x296 <xTaskIncrementTick+0x7a>
 332:	dc 2c       	mov	r13, r12
 334:	b0 cf       	rjmp	.-160    	; 0x296 <xTaskIncrementTick+0x7a>
 336:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <pxCurrentTCB>
 33a:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <pxCurrentTCB+0x1>
 33e:	86 89       	ldd	r24, Z+22	; 0x16
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	ee 0f       	add	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	8e 0f       	add	r24, r30
 352:	9f 1f       	adc	r25, r31
 354:	fc 01       	movw	r30, r24
 356:	e3 59       	subi	r30, 0x93	; 147
 358:	ff 4f       	sbci	r31, 0xFF	; 255
 35a:	80 81       	ld	r24, Z
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	48 f0       	brcs	.+18     	; 0x372 <xTaskIncrementTick+0x156>
 360:	dd 24       	eor	r13, r13
 362:	d3 94       	inc	r13
 364:	06 c0       	rjmp	.+12     	; 0x372 <xTaskIncrementTick+0x156>
 366:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <uxPendedTicks>
 36a:	8f 5f       	subi	r24, 0xFF	; 255
 36c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <uxPendedTicks>
 370:	d1 2c       	mov	r13, r1
 372:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xYieldPending>
 376:	88 23       	and	r24, r24
 378:	11 f0       	breq	.+4      	; 0x37e <xTaskIncrementTick+0x162>
 37a:	dd 24       	eor	r13, r13
 37c:	d3 94       	inc	r13
 37e:	8d 2d       	mov	r24, r13
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	df 90       	pop	r13
 38e:	cf 90       	pop	r12
 390:	08 95       	ret

00000392 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 392:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 396:	88 23       	and	r24, r24
 398:	21 f0       	breq	.+8      	; 0x3a2 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <xYieldPending>
 3a0:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 3a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 3a6:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <uxTopReadyPriority>
 3aa:	82 2f       	mov	r24, r18
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	fc 01       	movw	r30, r24
 3b0:	ee 0f       	add	r30, r30
 3b2:	ff 1f       	adc	r31, r31
 3b4:	ee 0f       	add	r30, r30
 3b6:	ff 1f       	adc	r31, r31
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	e8 0f       	add	r30, r24
 3be:	f9 1f       	adc	r31, r25
 3c0:	e3 59       	subi	r30, 0x93	; 147
 3c2:	ff 4f       	sbci	r31, 0xFF	; 255
 3c4:	30 81       	ld	r19, Z
 3c6:	31 11       	cpse	r19, r1
 3c8:	11 c0       	rjmp	.+34     	; 0x3ec <vTaskSwitchContext+0x5a>
 3ca:	21 50       	subi	r18, 0x01	; 1
 3cc:	82 2f       	mov	r24, r18
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	fc 01       	movw	r30, r24
 3d2:	ee 0f       	add	r30, r30
 3d4:	ff 1f       	adc	r31, r31
 3d6:	ee 0f       	add	r30, r30
 3d8:	ff 1f       	adc	r31, r31
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	e8 0f       	add	r30, r24
 3e0:	f9 1f       	adc	r31, r25
 3e2:	e3 59       	subi	r30, 0x93	; 147
 3e4:	ff 4f       	sbci	r31, 0xFF	; 255
 3e6:	30 81       	ld	r19, Z
 3e8:	33 23       	and	r19, r19
 3ea:	79 f3       	breq	.-34     	; 0x3ca <vTaskSwitchContext+0x38>
 3ec:	ac 01       	movw	r20, r24
 3ee:	44 0f       	add	r20, r20
 3f0:	55 1f       	adc	r21, r21
 3f2:	44 0f       	add	r20, r20
 3f4:	55 1f       	adc	r21, r21
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	48 0f       	add	r20, r24
 3fc:	59 1f       	adc	r21, r25
 3fe:	da 01       	movw	r26, r20
 400:	a3 59       	subi	r26, 0x93	; 147
 402:	bf 4f       	sbci	r27, 0xFF	; 255
 404:	11 96       	adiw	r26, 0x01	; 1
 406:	ed 91       	ld	r30, X+
 408:	fc 91       	ld	r31, X
 40a:	12 97       	sbiw	r26, 0x02	; 2
 40c:	02 80       	ldd	r0, Z+2	; 0x02
 40e:	f3 81       	ldd	r31, Z+3	; 0x03
 410:	e0 2d       	mov	r30, r0
 412:	12 96       	adiw	r26, 0x02	; 2
 414:	fc 93       	st	X, r31
 416:	ee 93       	st	-X, r30
 418:	11 97       	sbiw	r26, 0x01	; 1
 41a:	40 59       	subi	r20, 0x90	; 144
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	e4 17       	cp	r30, r20
 420:	f5 07       	cpc	r31, r21
 422:	29 f4       	brne	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 424:	42 81       	ldd	r20, Z+2	; 0x02
 426:	53 81       	ldd	r21, Z+3	; 0x03
 428:	fd 01       	movw	r30, r26
 42a:	52 83       	std	Z+2, r21	; 0x02
 42c:	41 83       	std	Z+1, r20	; 0x01
 42e:	fc 01       	movw	r30, r24
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	ee 0f       	add	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	ee 0f       	add	r30, r30
 43a:	ff 1f       	adc	r31, r31
 43c:	8e 0f       	add	r24, r30
 43e:	9f 1f       	adc	r25, r31
 440:	fc 01       	movw	r30, r24
 442:	e3 59       	subi	r30, 0x93	; 147
 444:	ff 4f       	sbci	r31, 0xFF	; 255
 446:	01 80       	ldd	r0, Z+1	; 0x01
 448:	f2 81       	ldd	r31, Z+2	; 0x02
 44a:	e0 2d       	mov	r30, r0
 44c:	86 81       	ldd	r24, Z+6	; 0x06
 44e:	97 81       	ldd	r25, Z+7	; 0x07
 450:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <pxCurrentTCB+0x1>
 454:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <pxCurrentTCB>
 458:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <uxTopReadyPriority>
 45c:	08 95       	ret

0000045e <__vector_16>:
	}
	return ADC_INV_PARAMS;
}

ISR(ADC_vect)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
	if (NULL != AdcCallBack)
 480:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <AdcCallBack>
 484:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <AdcCallBack+0x1>
 488:	30 97       	sbiw	r30, 0x00	; 0
 48a:	09 f0       	breq	.+2      	; 0x48e <__vector_16+0x30>
	{
		(*AdcCallBack)();
 48c:	09 95       	icall
	}
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <__vector_11>:
			cli();
		}
	}
}

ISR(TIMER0_OVF_vect){
 4b0:	1f 92       	push	r1
 4b2:	0f 92       	push	r0
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	2f 93       	push	r18
 4bc:	3f 93       	push	r19
 4be:	4f 93       	push	r20
 4c0:	5f 93       	push	r21
 4c2:	6f 93       	push	r22
 4c4:	7f 93       	push	r23
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	af 93       	push	r26
 4cc:	bf 93       	push	r27
 4ce:	ef 93       	push	r30
 4d0:	ff 93       	push	r31
	if (NULL != T0_OV_CB)
 4d2:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <T0_OV_CB>
 4d6:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <T0_OV_CB+0x1>
 4da:	30 97       	sbiw	r30, 0x00	; 0
 4dc:	09 f0       	breq	.+2      	; 0x4e0 <__vector_11+0x30>
	{
		(*T0_OV_CB)();
 4de:	09 95       	icall
	}
}
 4e0:	ff 91       	pop	r31
 4e2:	ef 91       	pop	r30
 4e4:	bf 91       	pop	r27
 4e6:	af 91       	pop	r26
 4e8:	9f 91       	pop	r25
 4ea:	8f 91       	pop	r24
 4ec:	7f 91       	pop	r23
 4ee:	6f 91       	pop	r22
 4f0:	5f 91       	pop	r21
 4f2:	4f 91       	pop	r20
 4f4:	3f 91       	pop	r19
 4f6:	2f 91       	pop	r18
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <__vector_10>:
ISR(TIMER0_COMP_vect){
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	2f 93       	push	r18
 50e:	3f 93       	push	r19
 510:	4f 93       	push	r20
 512:	5f 93       	push	r21
 514:	6f 93       	push	r22
 516:	7f 93       	push	r23
 518:	8f 93       	push	r24
 51a:	9f 93       	push	r25
 51c:	af 93       	push	r26
 51e:	bf 93       	push	r27
 520:	ef 93       	push	r30
 522:	ff 93       	push	r31
	if (NULL != T0_OC_CB)
 524:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <T0_OC_CB>
 528:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <T0_OC_CB+0x1>
 52c:	30 97       	sbiw	r30, 0x00	; 0
 52e:	09 f0       	breq	.+2      	; 0x532 <__vector_10+0x30>
	{
		(*T0_OC_CB)();
 530:	09 95       	icall
	}
	
}
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	bf 91       	pop	r27
 538:	af 91       	pop	r26
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	7f 91       	pop	r23
 540:	6f 91       	pop	r22
 542:	5f 91       	pop	r21
 544:	4f 91       	pop	r20
 546:	3f 91       	pop	r19
 548:	2f 91       	pop	r18
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <__vector_5>:
ISR(TIMER2_OVF_vect){
 554:	1f 92       	push	r1
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	0f 92       	push	r0
 55c:	11 24       	eor	r1, r1
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
	if (NULL != T2_OV_CB)
 576:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <T2_OV_CB>
 57a:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <T2_OV_CB+0x1>
 57e:	30 97       	sbiw	r30, 0x00	; 0
 580:	09 f0       	breq	.+2      	; 0x584 <__vector_5+0x30>
	{
		(*T2_OV_CB)();
 582:	09 95       	icall
	}
	
}
 584:	ff 91       	pop	r31
 586:	ef 91       	pop	r30
 588:	bf 91       	pop	r27
 58a:	af 91       	pop	r26
 58c:	9f 91       	pop	r25
 58e:	8f 91       	pop	r24
 590:	7f 91       	pop	r23
 592:	6f 91       	pop	r22
 594:	5f 91       	pop	r21
 596:	4f 91       	pop	r20
 598:	3f 91       	pop	r19
 59a:	2f 91       	pop	r18
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <__vector_4>:
ISR(TIMER2_COMP_vect){
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
	if (NULL != T2_OC_CB)
 5c8:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <T2_OC_CB>
 5cc:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <T2_OC_CB+0x1>
 5d0:	30 97       	sbiw	r30, 0x00	; 0
 5d2:	09 f0       	breq	.+2      	; 0x5d6 <__vector_4+0x30>
	{
		(*T2_OC_CB)();
 5d4:	09 95       	icall
	}
	
 5d6:	ff 91       	pop	r31
 5d8:	ef 91       	pop	r30
 5da:	bf 91       	pop	r27
 5dc:	af 91       	pop	r26
 5de:	9f 91       	pop	r25
 5e0:	8f 91       	pop	r24
 5e2:	7f 91       	pop	r23
 5e4:	6f 91       	pop	r22
 5e6:	5f 91       	pop	r21
 5e8:	4f 91       	pop	r20
 5ea:	3f 91       	pop	r19
 5ec:	2f 91       	pop	r18
 5ee:	0f 90       	pop	r0
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	0f 90       	pop	r0
 5f4:	1f 90       	pop	r1
 5f6:	18 95       	reti

000005f8 <__vector_13>:
	}
	PORTA=0xff;
	return RetVal;
}

ISR(USART_RXC_vect){
 5f8:	1f 92       	push	r1
 5fa:	0f 92       	push	r0
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	0f 92       	push	r0
 600:	11 24       	eor	r1, r1
 602:	2f 93       	push	r18
 604:	3f 93       	push	r19
 606:	4f 93       	push	r20
 608:	5f 93       	push	r21
 60a:	6f 93       	push	r22
 60c:	7f 93       	push	r23
 60e:	8f 93       	push	r24
 610:	9f 93       	push	r25
 612:	af 93       	push	r26
 614:	bf 93       	push	r27
 616:	ef 93       	push	r30
 618:	ff 93       	push	r31
	if (RxcCb){
 61a:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <RxcCb>
 61e:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <RxcCb+0x1>
 622:	30 97       	sbiw	r30, 0x00	; 0
 624:	09 f0       	breq	.+2      	; 0x628 <__vector_13+0x30>
		RxcCb();
 626:	09 95       	icall
	}

}
 628:	ff 91       	pop	r31
 62a:	ef 91       	pop	r30
 62c:	bf 91       	pop	r27
 62e:	af 91       	pop	r26
 630:	9f 91       	pop	r25
 632:	8f 91       	pop	r24
 634:	7f 91       	pop	r23
 636:	6f 91       	pop	r22
 638:	5f 91       	pop	r21
 63a:	4f 91       	pop	r20
 63c:	3f 91       	pop	r19
 63e:	2f 91       	pop	r18
 640:	0f 90       	pop	r0
 642:	0f be       	out	0x3f, r0	; 63
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

0000064a <__vector_14>:

ISR(USART_UDRE_vect){
 64a:	1f 92       	push	r1
 64c:	0f 92       	push	r0
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	0f 92       	push	r0
 652:	11 24       	eor	r1, r1
 654:	2f 93       	push	r18
 656:	3f 93       	push	r19
 658:	4f 93       	push	r20
 65a:	5f 93       	push	r21
 65c:	6f 93       	push	r22
 65e:	7f 93       	push	r23
 660:	8f 93       	push	r24
 662:	9f 93       	push	r25
 664:	af 93       	push	r26
 666:	bf 93       	push	r27
 668:	ef 93       	push	r30
 66a:	ff 93       	push	r31
	if (TxcCb){
 66c:	e0 91 9f 00 	lds	r30, 0x009F	; 0x80009f <TxcCb>
 670:	f0 91 a0 00 	lds	r31, 0x00A0	; 0x8000a0 <TxcCb+0x1>
 674:	30 97       	sbiw	r30, 0x00	; 0
 676:	09 f0       	breq	.+2      	; 0x67a <__vector_14+0x30>
		TxcCb();
 678:	09 95       	icall
	}
}
 67a:	ff 91       	pop	r31
 67c:	ef 91       	pop	r30
 67e:	bf 91       	pop	r27
 680:	af 91       	pop	r26
 682:	9f 91       	pop	r25
 684:	8f 91       	pop	r24
 686:	7f 91       	pop	r23
 688:	6f 91       	pop	r22
 68a:	5f 91       	pop	r21
 68c:	4f 91       	pop	r20
 68e:	3f 91       	pop	r19
 690:	2f 91       	pop	r18
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <main>:
 * Created: 7/14/2021 8:52:51 AM
 * Author : ZeroX
 */ 
#include "MicroWave.h"

int main(void){
 69c:	ff cf       	rjmp	.-2      	; 0x69c <main>

0000069e <_exit>:
 69e:	f8 94       	cli

000006a0 <__stop_program>:
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <__stop_program>
